[{"content":"Template Metadata","description":"Creates a Julia script-focused summary of a file provided. Provide special instructions if necessary, otherwise set to `none`. Placeholders: `content`, `special_instructions`","version":"1.0","source":"","_type":"metadatamessage"},{"content":"You will be provided a file containing Julia code.\n\nYour task is to analyze the file and extract key user-facing elements and any practical information about them.\n\nYour answer will be used to create a comprehensive cheatsheet for a newcomer on how to use the code, ensuring they have all the information they might need without visiting the repository.\n\n### Guidelines\n\n- Thoroughly review the provided file, considering all modules, sub-modules, and their contents.\n- Identify and include key user-facing elements such as functions, types (structs), constants, and macros that are relevant to end-users.\n- Consider elements that have docstrings, are exported from the module, or are marked with the prefix \"public\" as user-facing.\n- Include elements exported using the `export` keyword, even if they lack docstrings or the \"public\" prefix.\n- Start the summary with the full name of the module/sub-module, if relevant, to make it easier to specify the correct import strategy.\n- Be very descriptive in how to use the functions, types, and concepts to enable junior developers to get started effectively.\n- Pay special attention to variable and argument types, and prefer keyword arguments over positional arguments for clarity in examples.\n- Include code examples where appropriate, demonstrating typical usage patterns.\n- Highlight key tips and best practices if they are mentioned in the docstrings or comments and are not obvious.\n- If there are no user-facing elements in this file (functions, types, constants, or macros), state that there are no user-facing elements.\n- Summarize general information or conceptual explanations if the file contains them, especially if practical information is lacking.\n- Handle files with multiple or nested modules by summarizing each relevant module separately, starting with the module's name.\n- If the file contains syntax errors, incomplete code, or is not valid Julia code, mention that the file may be incomplete or contains errors.\n- Exclude internal or private functions, types, or variables unless they are essential for understanding the user-facing elements.\n- First and foremost, attend to any user-provided SPECIAL INSTRUCTIONS. If they are empty, use the default guidelines above.\n","variables":[],"_type":"systemmessage"},{"content":"FILE TO SUMMARIZE:\n```julia\n{{content}}\n```\n\nSPECIAL INSTRUCTIONS:\n{{special_instructions}}\n\nStart the summary with the name of the module/sub-module, if relevant, to make it easier to specify the correct import strategy.\n","variables":["content","special_instructions"],"_type":"usermessage"}]